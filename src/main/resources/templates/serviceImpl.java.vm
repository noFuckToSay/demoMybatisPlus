package ${package.ServiceImpl};

import cn.hutool.core.collection.CollectionUtil;
import cn.hutool.core.util.ObjectUtil;
import cn.hutool.core.util.StrUtil;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import ${package.Entity}.${entity};
import ${package.Mapper}.${table.mapperName};
#if(${table.serviceInterface})
import ${package.Service}.${table.serviceName};
#end
import ${superServiceImplClassPackage};
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import java.time.LocalDateTime;

/**
 * <p>
 * $!{table.comment} 服务实现类
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
@Service
#if(${kotlin})
open class ${table.serviceImplName} : ${superServiceImplClass}<${table.mapperName}, ${entity}>()#if(${table.serviceInterface}), ${table.serviceName}#end {

}
#else
public class ${table.serviceImplName} extends ${superServiceImplClass}<${table.mapperName}, ${entity}>#if(${table.serviceInterface}) implements ${table.serviceName}#end {
    @Override 
    public void excelImport(MultipartFile file) {
        try{
        List<${entity}> ${entity.toLowerCase()}s;
        //用户输入的参数
        ${entity.toLowerCase()}s = ExcelUtils.readMultipartFile(file, ${entity}.class);
        //过滤必填字段有缺失的非法记录，返回给前端
        StringBuilder sb=new StringBuilder();
        for (int i = 0; i < ${entity.toLowerCase()}s.size(); i++) {
            String tips=${entity.toLowerCase()}s.get(i).getRowTips();
            if(StrUtil.isNotEmpty(tips)){
                sb.append("第"+(i+2)+"行:\r\n").append(tips+"\r\n\r\n");
            }
        }
        String tips=sb.toString();

        if(StrUtil.isNotEmpty(tips)){
            throw new ServiceException(tips);
        }
        //新增记录
        ${entity.toLowerCase()}s.stream().forEach(this::create);

        }catch (Exception ex){
            throw new ServiceException(ex.getMessage());
        }
    }

    /**
    * {ids}选定行导出
    * {dto}查询条件所有记录导出
    * */
    @Override
    public List<${entity}> excelExport(List<Long> ids, ${entity}Dto dto) {

        //导出选定行
        if(CollectionUtil.isNotEmpty(ids)){
            return this.list(new LambdaQueryWrapper<${entity}>().in(${entity}::getId,ids));
        }else{
            return this.list(${entity}.defaultWrapper(dto));
        }

    }

    @Override
    @Transactional
    public void create(${entity} ${entity.toLowerCase()}) {
        ${entity.toLowerCase()}=prePersistOrUpdate(${entity.toLowerCase()});

        //保存
        this.save(${entity.toLowerCase()});
    }

    @Override
    @Transactional
    public void update(${entity} ${entity.toLowerCase()}) {
        ${entity.toLowerCase()}=prePersistOrUpdate(${entity.toLowerCase()});
        //保存
        this.updateById(${entity.toLowerCase()});
    }

    @Override
    public void logicDelete(List<Long> ids) {
        ids.stream()
            .distinct()
            .map(id->{
                ${entity} ${entity.toLowerCase()}=new ${entity}();
                ${entity.toLowerCase()}.setId(id);
##                ${entity.toLowerCase()}.setIsDel(1);
            return ${entity.toLowerCase()};
        })
        .forEach(item->{
            this.updateById(prePersistOrUpdate(item));
        });

    }

    /**
    *新增和修改的时候，前置处理
    * */
    private ${entity} prePersistOrUpdate(${entity} ${entity.toLowerCase()}){
        //新增的时候
        if(ObjectUtil.isNull(${entity.toLowerCase()}.getId())){

            ${entity.toLowerCase()}.setCreateTime(LocalDateTime.now());    //创建时间
            ${entity.toLowerCase()}.setUpdateTime(LocalDateTime.now());    //修改时间
            //${entity.toLowerCase()}.setCreateBy("");                     //todo 主表创建人
            //${entity.toLowerCase()}.setOrderNo(this.getWaterCode());       //单号

        }else{//修改的时候

            ${entity.toLowerCase()}.setUpdateTime(LocalDateTime.now());    //修改时间
            ${entity.toLowerCase()}.setUpdateBy("");                       //todo 修改人
        }

        return ${entity.toLowerCase()};
    }
}
#end
